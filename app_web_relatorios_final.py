#!/usr/bin/env python3
"""
Aplica√ß√£o Web para Gera√ß√£o de Relat√≥rios de Efici√™ncia Hospitalar - VERS√ÉO FINAL
Vers√£o simplificada que foca no download e preview b√°sico funcionando.
"""

import streamlit as st
import streamlit.components.v1 as components
import pandas as pd
import pathlib
import sys
import tempfile
import os
import base64
import zipfile
from datetime import datetime
import logging

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Relat√≥rios de Efici√™ncia Hospitalar",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Adiciona o diret√≥rio raiz do projeto ao sys.path
project_root_path = pathlib.Path(__file__).resolve().parent
if str(project_root_path) not in sys.path:
    sys.path.append(str(project_root_path))

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .info-box {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #007bff;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #28a745;
        margin: 1rem 0;
    }
    .report-preview {
        background-color: #f8f9fa;
        border: 2px dashed #007bff;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Importa√ß√µes do projeto
try:
    from scripts.relatorio_cnes import CarregadorConfiguracao, CarregadorDados, GeradorRelatorio
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.stop()

@st.cache_data(ttl=3600)  # Cache por 1 hora
def carregar_dados_disponiveis():
    """Carrega dados dispon√≠veis para sele√ß√£o."""
    try:
        config = CarregadorConfiguracao('config.yaml')
        carregador = CarregadorDados(config)
        
        df_mm = carregador.carregar_media_movel()
        
        cnes_disponiveis = sorted(df_mm['CNES'].unique())
        competencias_disponiveis = sorted(df_mm['COMPETEN'].unique(), reverse=True)
        
        hospitais_info = {}
        for cnes in cnes_disponiveis:
            df_hospital = df_mm[df_mm['CNES'] == cnes]
            if not df_hospital.empty:
                nome = 'Hospital n√£o identificado'
                municipio = 'N/A'
                uf = 'N/A'
                
                if 'DESCESTAB' in df_hospital.columns:
                    nome = str(df_hospital['DESCESTAB'].iloc[0])
                if 'MUNICIPIO' in df_hospital.columns and pd.notna(df_hospital['MUNICIPIO'].iloc[0]):
                    municipio = str(df_hospital['MUNICIPIO'].iloc[0])
                if 'UF' in df_hospital.columns and pd.notna(df_hospital['UF'].iloc[0]):
                    uf = str(df_hospital['UF'].iloc[0])
                
                hospitais_info[cnes] = {
                    'nome': nome,
                    'municipio': municipio,
                    'uf': uf,
                    'display': f"{nome} - {municipio}/{uf}"
                }
            else:
                hospitais_info[cnes] = {
                    'nome': f"CNES {cnes}",
                    'municipio': 'N/A',
                    'uf': 'N/A',
                    'display': f"CNES {cnes}"
                }
        
        return cnes_disponiveis, competencias_disponiveis, hospitais_info, df_mm
    
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return [], [], {}, pd.DataFrame()

@st.cache_data(ttl=1800)  # Cache por 30 minutos
def carregar_configuracao():
    """Carrega configura√ß√£o com cache."""
    try:
        return CarregadorConfiguracao('config.yaml')
    except Exception as e:
        st.error(f"Erro ao carregar configura√ß√£o: {e}")
        return None

@st.cache_data(ttl=3600)  # Cache por 1 hora
def carregar_dados_base():
    """Carrega dados base com cache otimizado."""
    try:
        config = carregar_configuracao()
        if not config:
            return None, None, None
            
        carregador = CarregadorDados(config)
        
        # Carrega todos os dados base uma vez
        df_mm = carregador.carregar_media_movel()
        df_dea = carregador.carregar_dea()
        df_alertas = carregador.carregar_alertas()
        
        return df_mm, df_dea, df_alertas
    except Exception as e:
        st.error(f"Erro ao carregar dados base: {e}")
        return None, None, None

def formatar_competencia(competencia):
    """Formata compet√™ncia para exibi√ß√£o."""
    if len(str(competencia)) == 6:
        ano = str(competencia)[:4]
        mes = str(competencia)[4:]
        meses = {
            '01': 'Janeiro', '02': 'Fevereiro', '03': 'Mar√ßo', '04': 'Abril',
            '05': 'Maio', '06': 'Junho', '07': 'Julho', '08': 'Agosto',
            '09': 'Setembro', '10': 'Outubro', '11': 'Novembro', '12': 'Dezembro'
        }
        return f"{meses.get(mes, mes)}/{ano}"
    return str(competencia)

def criar_pacote_download(html_path):
    """Cria pacote ZIP com todos os arquivos do relat√≥rio."""
    try:
        report_dir = pathlib.Path(html_path).parent
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        zip_path = report_dir / f"relatorio_pacote_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Adicionar arquivo HTML principal
            zipf.write(html_path, 'relatorio_completo.html')
            
            # Adicionar todos os arquivos auxiliares
            for file_path in report_dir.glob('*'):
                if file_path.is_file() and file_path != zip_path:
                    if file_path.suffix in ['.html', '.png', '.css', '.js']:
                        zipf.write(file_path, file_path.name)
        
        return zip_path
    
    except Exception as e:
        st.error(f"Erro ao criar pacote: {e}")
        return None

def extrair_preview_do_relatorio(html_path):
    """Extrai informa√ß√µes b√°sicas do relat√≥rio para preview."""
    try:
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Extrair informa√ß√µes b√°sicas
        info = {
            'tamanho_arquivo': len(html_content),
            'num_graficos': html_content.count('<iframe'),
            'num_imagens': html_content.count('src="procedimentos'),
            'tem_tabelas': 'table' in html_content,
            'tem_spider': 'spider' in html_content.lower(),
            'tem_evolucao': 'evolucao' in html_content.lower(),
            'tem_benchmarks': 'benchmarks' in html_content.lower(),
        }
        
        return info
    
    except Exception as e:
        st.error(f"Erro ao extrair preview: {e}")
        return None

def gerar_relatorio_web(cnes, competencia):
    """Gera relat√≥rio incorporado para visualiza√ß√£o na p√°gina."""
    try:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        status_text.text('üîÑ Inicializando gera√ß√£o do relat√≥rio...')
        progress_bar.progress(10)
        
        # Usa configura√ß√£o cached
        config = carregar_configuracao()
        if not config:
            st.error("Erro ao carregar configura√ß√£o")
            return None
            
        gerador = GeradorRelatorio(config)
        
        status_text.text('üìä Carregando dados...')
        progress_bar.progress(30)
        
        status_text.text('üìà Processando dados e gerando visualiza√ß√µes...')
        progress_bar.progress(50)
        
        # Sempre gera relat√≥rio embedded para visualiza√ß√£o
        status_text.text('üì¶ Gerando relat√≥rio incorporado...')
        progress_bar.progress(70)
        
        html_content = gerador.gerar_relatorio_embedded(cnes, competencia)
        
        status_text.text('‚úÖ Relat√≥rio gerado com sucesso!')
        progress_bar.progress(100)
        
        # Informa√ß√µes do relat√≥rio
        tamanho_kb = len(html_content.encode('utf-8')) / 1024
        
        return {
            'html_content': html_content,
            'tamanho_kb': tamanho_kb,
            'preview_info': {
                'tamanho_arquivo': len(html_content),
                'num_graficos': html_content.count('plotly-container'),
                'num_imagens': html_content.count('data:image'),
                'tem_tabelas': 'table' in html_content,
                'tem_spider': 'spider' in html_content.lower(),
                'tem_evolucao': 'temporal' in html_content.lower() or 'evolucao' in html_content.lower(),
                'tem_benchmarks': 'benchmarks' in html_content.lower() or 'benchmark' in html_content.lower(),
            }
        }
            
    except Exception as e:
        st.error(f"Erro ao gerar relat√≥rio: {e}")
        return None

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    
    # Cabe√ßalho
    st.markdown("""
    <div class="main-header">
        <h1>üè• Sistema de Relat√≥rios de Efici√™ncia Hospitalar</h1>
        <p>Gere relat√≥rios detalhados de efici√™ncia para hospitais espec√≠ficos</p>
        <p><strong>üì• Download direto ‚Ä¢ üéØ Mesma qualidade do modo local</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Carrega dados dispon√≠veis com cache otimizado
    with st.spinner('üîÑ Carregando dados dispon√≠veis...'):
        # Usa cache otimizado - dados ficam em mem√≥ria
        if 'dados_iniciais_carregados' not in st.session_state:
            cnes_disponiveis, competencias_disponiveis, hospitais_info, df_mm = carregar_dados_disponiveis()
            st.session_state.cnes_disponiveis = cnes_disponiveis
            st.session_state.competencias_disponiveis = competencias_disponiveis  
            st.session_state.hospitais_info = hospitais_info
            st.session_state.df_mm = df_mm
            st.session_state.dados_iniciais_carregados = True
        else:
            # Usa dados do session_state (mais r√°pido)
            cnes_disponiveis = st.session_state.cnes_disponiveis
            competencias_disponiveis = st.session_state.competencias_disponiveis
            hospitais_info = st.session_state.hospitais_info
            df_mm = st.session_state.df_mm
    
    if not cnes_disponiveis:
        st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Verifique se os arquivos est√£o dispon√≠veis.")
        return
    
    # Layout em colunas
    col_filtros, col_info = st.columns([3, 1])
    
    with col_filtros:
        st.subheader("üîß Configura√ß√µes do Relat√≥rio")
        
        # Busca de hospitais
        busca = st.text_input("üîç Buscar hospital por nome, munic√≠pio ou CNES:")
        
        # Filtrar hospitais
        cnes_filtrados = cnes_disponiveis
        if busca:
            busca_lower = busca.lower()
            cnes_filtrados = [
                cnes for cnes in cnes_disponiveis 
                if (busca_lower in hospitais_info[cnes]['nome'].lower() or
                    busca_lower in hospitais_info[cnes]['municipio'].lower() or
                    busca_lower in hospitais_info[cnes]['uf'].lower() or
                    busca in cnes)
            ]
            
            if not cnes_filtrados:
                st.warning("‚ö†Ô∏è Nenhum hospital encontrado com o termo de busca.")
                cnes_filtrados = cnes_disponiveis[:10]  # Mostrar primeiros 10
        
        # Sele√ß√£o de CNES
        if cnes_filtrados:
            opcoes_display = [hospitais_info[cnes]['display'] for cnes in cnes_filtrados[:50]]  # Limitar a 50
            hospital_selecionado = st.selectbox(
                "üè• Selecionar Hospital:",
                options=opcoes_display,
                key="hospital_select"
            )
            
            cnes_selecionado = None
            for cnes in cnes_filtrados:
                if hospitais_info[cnes]['display'] == hospital_selecionado:
                    cnes_selecionado = cnes
                    break
        else:
            cnes_selecionado = None
        
        # Sele√ß√£o de compet√™ncia
        competencia_selecionada = None
        if cnes_selecionado:
            competencias_cnes = sorted(
                df_mm[df_mm['CNES'] == cnes_selecionado]['COMPETEN'].unique(), 
                reverse=True
            )
            
            if competencias_cnes:
                competencias_display = [formatar_competencia(comp) for comp in competencias_cnes]
                comp_selecionada_display = st.selectbox(
                    "üìÖ Selecionar Compet√™ncia:",
                    options=competencias_display,
                    key="comp_select"
                )
                
                idx = competencias_display.index(comp_selecionada_display)
                competencia_selecionada = competencias_cnes[idx]
            else:
                st.warning("‚ö†Ô∏è Nenhuma compet√™ncia dispon√≠vel para este hospital.")
    
    with col_info:
        st.subheader("üìä Estat√≠sticas do Sistema")
        st.metric("üè• Hospitais", len(cnes_disponiveis))
        st.metric("üìÖ Compet√™ncias", len(competencias_disponiveis))
        
        if cnes_selecionado:
            registros_hospital = len(df_mm[df_mm['CNES'] == cnes_selecionado])
            st.metric("üìã Registros do Hospital", registros_hospital)
        
        # Info do conte√∫do
        st.markdown("""
        **üìä Conte√∫do do Relat√≥rio:**
        - ‚úÖ Resumo executivo com efici√™ncia
        - ‚úÖ Evolu√ß√£o temporal (12 meses)
        - ‚úÖ An√°lise DEA e benchmarks
        - ‚úÖ Gr√°ficos de procedimentos
        - ‚úÖ Spider chart de alvos
        - ‚úÖ Sistema de alertas
        
        **üéØ Funcionalidades:**
        - üñ•Ô∏è **Visualiza√ß√£o na p√°gina**: Veja o relat√≥rio diretamente aqui
        - üì• **Download**: Baixe o arquivo HTML completo
        - üì§ **Compartilhamento**: Arquivo autossuficiente
        """)
    
    # Informa√ß√µes do hospital selecionado
    if cnes_selecionado and competencia_selecionada:
        st.markdown("---")
        
        info = hospitais_info[cnes_selecionado]
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            <div class="info-box">
                <h4>üìã Hospital Selecionado</h4>
                <p><strong>CNES:</strong> {cnes_selecionado}</p>
                <p><strong>Nome:</strong> {info['nome']}</p>
                <p><strong>Munic√≠pio:</strong> {info['municipio']}</p>
                <p><strong>UF:</strong> {info['uf']}</p>
                <p><strong>Compet√™ncia:</strong> {formatar_competencia(competencia_selecionada)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Bot√£o de gera√ß√£o
            st.markdown("**üìä Gerar Relat√≥rio:**")
            
            if st.button("üöÄ Gerar Relat√≥rio Completo", type="primary", use_container_width=True, help="Gera relat√≥rio para visualiza√ß√£o na p√°gina"):
                st.session_state.gerar_relatorio = True
                st.session_state.relatorio_gerado = False
        
        # Gera√ß√£o do relat√≥rio
        if st.session_state.get('gerar_relatorio', False) and not st.session_state.get('relatorio_gerado', False):
            st.markdown("### üîÑ Gerando Relat√≥rio...")
            
            resultados = gerar_relatorio_web(cnes_selecionado, competencia_selecionada)
            
            if resultados:
                st.session_state.resultados_relatorio = resultados
                st.session_state.relatorio_gerado = True
                st.session_state.gerar_relatorio = False
                st.rerun()  # Recarregar para mostrar resultados
            else:
                st.error("‚ùå Erro ao gerar o relat√≥rio. Tente novamente.")
                st.session_state.gerar_relatorio = False
        
        # Mostrar resultados se relat√≥rio foi gerado
        if st.session_state.get('relatorio_gerado', False) and 'resultados_relatorio' in st.session_state:
            resultados = st.session_state.resultados_relatorio
            
            st.markdown("""
            <div class="success-box">
                <h3>‚úÖ Relat√≥rio Gerado com Sucesso!</h3>
                <p>Relat√≥rio completo gerado com todas as funcionalidades do modo local.</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Preview das informa√ß√µes
            if resultados['preview_info']:
                info_preview = resultados['preview_info']
                tamanho_info = f"üìÅ Tamanho: {resultados['tamanho_kb']:.1f} KB"
                
                col_info, col_download = st.columns([2, 1])
                
                with col_info:
                    st.markdown(f"""
                    <div class="report-preview">
                        <h4>üìÑ Informa√ß√µes do Relat√≥rio</h4>
                        <div style="display: flex; justify-content: space-around; margin: 1rem 0;">
                            <div><strong>üìä Gr√°ficos:</strong> {info_preview['num_graficos']}</div>
                            <div><strong>üñºÔ∏è Imagens:</strong> {info_preview['num_imagens']}</div>
                            <div><strong>üìã Tabelas:</strong> {'‚úÖ' if info_preview['tem_tabelas'] else '‚ùå'}</div>
                        </div>
                        <div style="display: flex; justify-content: space-around;">
                            <div><strong>üï∑Ô∏è Spider Chart:</strong> {'‚úÖ' if info_preview['tem_spider'] else '‚ùå'}</div>
                            <div><strong>üìà Evolu√ß√£o:</strong> {'‚úÖ' if info_preview['tem_evolucao'] else '‚ùå'}</div>
                            <div><strong>üéØ Benchmarks:</strong> {'‚úÖ' if info_preview['tem_benchmarks'] else '‚ùå'}</div>
                        </div>
                        <p style="margin-top: 1rem;"><strong>{tamanho_info}</strong></p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col_download:
                    # Bot√£o de download
                    nome_html = f"relatorio_{cnes_selecionado}_{competencia_selecionada}.html"
                    st.download_button(
                        label="üì• Baixar Relat√≥rio",
                        data=resultados['html_content'].encode('utf-8'),
                        file_name=nome_html,
                        mime="text/html",
                        use_container_width=True,
                        help="Download do arquivo HTML completo"
                    )
                    
                    # Bot√£o para novo relat√≥rio
                    if st.button("üîÑ Novo Relat√≥rio", use_container_width=True):
                        # Limpar estado
                        for key in ['gerar_relatorio', 'relatorio_gerado', 'resultados_relatorio']:
                            if key in st.session_state:
                                del st.session_state[key]
                        st.rerun()
            
            # Divisor
            st.markdown("---")
            
            # Visualiza√ß√£o do relat√≥rio na p√°gina
            st.markdown("### üìä Visualiza√ß√£o do Relat√≥rio")
            
            # Op√ß√µes de visualiza√ß√£o
            col_view_options, col_view_action = st.columns([3, 1])
            
            with col_view_options:
                view_mode = st.radio(
                    "Modo de visualiza√ß√£o:",
                    ["üñ•Ô∏è Visualizar na p√°gina", "üì± Visualiza√ß√£o compacta"],
                    horizontal=True,
                    help="Escolha como visualizar o relat√≥rio"
                )
            
            with col_view_action:
                if st.button("üîÑ Atualizar Visualiza√ß√£o", use_container_width=True):
                    st.rerun()
            
            # Exibir o relat√≥rio
            if view_mode == "üñ•Ô∏è Visualizar na p√°gina":
                # Visualiza√ß√£o completa
                st.markdown("""
                <div style="background-color: #f8f9fa; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;">
                    <h5>üìã Relat√≥rio Completo</h5>
                    <p>Visualiza√ß√£o completa do relat√≥rio com todos os gr√°ficos e tabelas interativas.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Exibir o HTML do relat√≥rio
                components.html(resultados['html_content'], height=800, scrolling=True)
                
            else:
                # Visualiza√ß√£o compacta
                st.markdown("""
                <div style="background-color: #e7f3ff; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;">
                    <h5>üì± Visualiza√ß√£o Compacta</h5>
                    <p>Visualiza√ß√£o otimizada para dispositivos menores ou navega√ß√£o r√°pida.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Exibir o HTML do relat√≥rio em tamanho menor
                components.html(resultados['html_content'], height=600, scrolling=True)
            
            # Informa√ß√µes de uso
            st.markdown("""
            ---
            ### üìù Como usar:
            
            - **üñ•Ô∏è Visualiza√ß√£o na p√°gina**: Veja o relat√≥rio completo diretamente aqui
            - **üì• Download**: Use o bot√£o "Baixar Relat√≥rio" para salvar o arquivo
            - **üì§ Compartilhamento**: O arquivo baixado √© autossuficiente e pode ser enviado por email
            - **üîÑ Novo relat√≥rio**: Use o bot√£o "Novo Relat√≥rio" para gerar outro
            
            > **‚úÖ Garantia**: Relat√≥rio **completo e id√™ntico** ao modo local!
            """)
    
    else:
        # Mensagens de orienta√ß√£o
        if not cnes_selecionado:
            st.info("üëÜ Selecione um hospital acima para continuar.")
        elif not competencia_selecionada:
            st.info("üëÜ Selecione uma compet√™ncia para o hospital escolhido.")

if __name__ == "__main__":
    main() 