#!/usr/bin/env python3
"""
Aplica√ß√£o Web para Gera√ß√£o de Relat√≥rios de Efici√™ncia Hospitalar - VERS√ÉO FINAL
Vers√£o simplificada que foca no download e preview b√°sico funcionando.
"""

import streamlit as st
import pandas as pd
import pathlib
import sys
import tempfile
import os
import base64
import zipfile
from datetime import datetime
import logging

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Relat√≥rios de Efici√™ncia Hospitalar",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Adiciona o diret√≥rio raiz do projeto ao sys.path
project_root_path = pathlib.Path(__file__).resolve().parent
if str(project_root_path) not in sys.path:
    sys.path.append(str(project_root_path))

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .info-box {
        background-color: #f8f9fa;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #007bff;
        margin: 1rem 0;
    }
    .success-box {
        background-color: #d4edda;
        padding: 1rem;
        border-radius: 5px;
        border-left: 5px solid #28a745;
        margin: 1rem 0;
    }
    .report-preview {
        background-color: #f8f9fa;
        border: 2px dashed #007bff;
        border-radius: 10px;
        padding: 2rem;
        text-align: center;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# Importa√ß√µes do projeto
try:
    from scripts.relatorio_cnes import CarregadorConfiguracao, CarregadorDados, GeradorRelatorio
except ImportError as e:
    st.error(f"Erro ao importar m√≥dulos: {e}")
    st.stop()

@st.cache_data
def carregar_dados_disponiveis():
    """Carrega dados dispon√≠veis para sele√ß√£o."""
    try:
        config = CarregadorConfiguracao('config.yaml')
        carregador = CarregadorDados(config)
        
        df_mm = carregador.carregar_media_movel()
        
        cnes_disponiveis = sorted(df_mm['CNES'].unique())
        competencias_disponiveis = sorted(df_mm['COMPETEN'].unique(), reverse=True)
        
        hospitais_info = {}
        for cnes in cnes_disponiveis:
            df_hospital = df_mm[df_mm['CNES'] == cnes]
            if not df_hospital.empty:
                nome = 'Hospital n√£o identificado'
                municipio = 'N/A'
                uf = 'N/A'
                
                if 'DESCESTAB' in df_hospital.columns:
                    nome = str(df_hospital['DESCESTAB'].iloc[0])
                if 'MUNICIPIO' in df_hospital.columns and pd.notna(df_hospital['MUNICIPIO'].iloc[0]):
                    municipio = str(df_hospital['MUNICIPIO'].iloc[0])
                if 'UF' in df_hospital.columns and pd.notna(df_hospital['UF'].iloc[0]):
                    uf = str(df_hospital['UF'].iloc[0])
                
                hospitais_info[cnes] = {
                    'nome': nome,
                    'municipio': municipio,
                    'uf': uf,
                    'display': f"{nome} - {municipio}/{uf}"
                }
            else:
                hospitais_info[cnes] = {
                    'nome': f"CNES {cnes}",
                    'municipio': 'N/A',
                    'uf': 'N/A',
                    'display': f"CNES {cnes}"
                }
        
        return cnes_disponiveis, competencias_disponiveis, hospitais_info, df_mm
    
    except Exception as e:
        st.error(f"Erro ao carregar dados: {e}")
        return [], [], {}, pd.DataFrame()

def formatar_competencia(competencia):
    """Formata compet√™ncia para exibi√ß√£o."""
    if len(str(competencia)) == 6:
        ano = str(competencia)[:4]
        mes = str(competencia)[4:]
        meses = {
            '01': 'Janeiro', '02': 'Fevereiro', '03': 'Mar√ßo', '04': 'Abril',
            '05': 'Maio', '06': 'Junho', '07': 'Julho', '08': 'Agosto',
            '09': 'Setembro', '10': 'Outubro', '11': 'Novembro', '12': 'Dezembro'
        }
        return f"{meses.get(mes, mes)}/{ano}"
    return str(competencia)

def criar_pacote_download(html_path):
    """Cria pacote ZIP com todos os arquivos do relat√≥rio."""
    try:
        report_dir = pathlib.Path(html_path).parent
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        zip_path = report_dir / f"relatorio_pacote_{timestamp}.zip"
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Adicionar arquivo HTML principal
            zipf.write(html_path, 'relatorio_completo.html')
            
            # Adicionar todos os arquivos auxiliares
            for file_path in report_dir.glob('*'):
                if file_path.is_file() and file_path != zip_path:
                    if file_path.suffix in ['.html', '.png', '.css', '.js']:
                        zipf.write(file_path, file_path.name)
        
        return zip_path
    
    except Exception as e:
        st.error(f"Erro ao criar pacote: {e}")
        return None

def extrair_preview_do_relatorio(html_path):
    """Extrai informa√ß√µes b√°sicas do relat√≥rio para preview."""
    try:
        with open(html_path, 'r', encoding='utf-8') as f:
            html_content = f.read()
        
        # Extrair informa√ß√µes b√°sicas
        info = {
            'tamanho_arquivo': len(html_content),
            'num_graficos': html_content.count('<iframe'),
            'num_imagens': html_content.count('src="procedimentos'),
            'tem_tabelas': 'table' in html_content,
            'tem_spider': 'spider' in html_content.lower(),
            'tem_evolucao': 'evolucao' in html_content.lower(),
            'tem_benchmarks': 'benchmarks' in html_content.lower(),
        }
        
        return info
    
    except Exception as e:
        st.error(f"Erro ao extrair preview: {e}")
        return None

def gerar_relatorio_web(cnes, competencia, tipo='padrao'):
    """Gera relat√≥rio e retorna informa√ß√µes do arquivo."""
    try:
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        status_text.text('üîÑ Inicializando gera√ß√£o do relat√≥rio...')
        progress_bar.progress(10)
        
        config = CarregadorConfiguracao('config.yaml')
        gerador = GeradorRelatorio(config)
        
        status_text.text('üìä Carregando dados...')
        progress_bar.progress(30)
        
        status_text.text('üìà Processando dados e gerando visualiza√ß√µes...')
        progress_bar.progress(50)
        
        if tipo == 'embedded':
            # Gera relat√≥rio embedded (tudo incorporado)
            status_text.text('üì¶ Gerando relat√≥rio incorporado...')
            html_content = gerador.gerar_relatorio_embedded(cnes, competencia)
            
            status_text.text('‚úÖ Relat√≥rio incorporado gerado com sucesso!')
            progress_bar.progress(100)
            
            # Informa√ß√µes do relat√≥rio embedded
            tamanho_kb = len(html_content.encode('utf-8')) / 1024
            
            return {
                'html_content': html_content,
                'tipo': 'embedded',
                'tamanho_kb': tamanho_kb,
                'preview_info': {
                    'tamanho_arquivo': len(html_content),
                    'num_graficos': html_content.count('plotly-container'),
                    'num_imagens': html_content.count('data:image'),
                    'tem_tabelas': 'table' in html_content,
                    'tem_spider': 'spider' in html_content.lower(),
                    'tem_evolucao': 'temporal' in html_content.lower() or 'evolucao' in html_content.lower(),
                    'tem_benchmarks': 'benchmarks' in html_content.lower() or 'benchmark' in html_content.lower(),
                }
            }
        else:
            # Gera relat√≥rio padr√£o (com arquivos externos)
            arquivo_relatorio = gerador.gerar_relatorio_completo(cnes, competencia)
            
            status_text.text('üì¶ Preparando arquivos para download...')
            progress_bar.progress(80)
            
            if arquivo_relatorio and os.path.exists(arquivo_relatorio):
                # Criar pacote ZIP
                zip_path = criar_pacote_download(arquivo_relatorio)
                
                # Extrair informa√ß√µes para preview
                preview_info = extrair_preview_do_relatorio(arquivo_relatorio)
                
                status_text.text('‚úÖ Relat√≥rio padr√£o gerado com sucesso!')
                progress_bar.progress(100)
                
                return {
                    'html_path': arquivo_relatorio,
                    'zip_path': zip_path,
                    'tipo': 'padrao',
                    'preview_info': preview_info
                }
            else:
                status_text.text('‚ùå Erro: arquivo n√£o foi criado')
                return None
            
    except Exception as e:
        st.error(f"Erro ao gerar relat√≥rio: {e}")
        return None

def main():
    """Fun√ß√£o principal da aplica√ß√£o."""
    
    # Cabe√ßalho
    st.markdown("""
    <div class="main-header">
        <h1>üè• Sistema de Relat√≥rios de Efici√™ncia Hospitalar</h1>
        <p>Gere relat√≥rios detalhados de efici√™ncia para hospitais espec√≠ficos</p>
        <p><strong>üì• Download direto ‚Ä¢ üéØ Mesma qualidade do modo local</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Carrega dados dispon√≠veis
    with st.spinner('üîÑ Carregando dados dispon√≠veis...'):
        cnes_disponiveis, competencias_disponiveis, hospitais_info, df_mm = carregar_dados_disponiveis()
    
    if not cnes_disponiveis:
        st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Verifique se os arquivos est√£o dispon√≠veis.")
        return
    
    # Layout em colunas
    col_filtros, col_info = st.columns([3, 1])
    
    with col_filtros:
        st.subheader("üîß Configura√ß√µes do Relat√≥rio")
        
        # Busca de hospitais
        busca = st.text_input("üîç Buscar hospital por nome, munic√≠pio ou CNES:")
        
        # Filtrar hospitais
        cnes_filtrados = cnes_disponiveis
        if busca:
            busca_lower = busca.lower()
            cnes_filtrados = [
                cnes for cnes in cnes_disponiveis 
                if (busca_lower in hospitais_info[cnes]['nome'].lower() or
                    busca_lower in hospitais_info[cnes]['municipio'].lower() or
                    busca_lower in hospitais_info[cnes]['uf'].lower() or
                    busca in cnes)
            ]
            
            if not cnes_filtrados:
                st.warning("‚ö†Ô∏è Nenhum hospital encontrado com o termo de busca.")
                cnes_filtrados = cnes_disponiveis[:10]  # Mostrar primeiros 10
        
        # Sele√ß√£o de CNES
        if cnes_filtrados:
            opcoes_display = [hospitais_info[cnes]['display'] for cnes in cnes_filtrados[:50]]  # Limitar a 50
            hospital_selecionado = st.selectbox(
                "üè• Selecionar Hospital:",
                options=opcoes_display,
                key="hospital_select"
            )
            
            cnes_selecionado = None
            for cnes in cnes_filtrados:
                if hospitais_info[cnes]['display'] == hospital_selecionado:
                    cnes_selecionado = cnes
                    break
        else:
            cnes_selecionado = None
        
        # Sele√ß√£o de compet√™ncia
        competencia_selecionada = None
        if cnes_selecionado:
            competencias_cnes = sorted(
                df_mm[df_mm['CNES'] == cnes_selecionado]['COMPETEN'].unique(), 
                reverse=True
            )
            
            if competencias_cnes:
                competencias_display = [formatar_competencia(comp) for comp in competencias_cnes]
                comp_selecionada_display = st.selectbox(
                    "üìÖ Selecionar Compet√™ncia:",
                    options=competencias_display,
                    key="comp_select"
                )
                
                idx = competencias_display.index(comp_selecionada_display)
                competencia_selecionada = competencias_cnes[idx]
            else:
                st.warning("‚ö†Ô∏è Nenhuma compet√™ncia dispon√≠vel para este hospital.")
    
    with col_info:
        st.subheader("üìä Estat√≠sticas do Sistema")
        st.metric("üè• Hospitais", len(cnes_disponiveis))
        st.metric("üìÖ Compet√™ncias", len(competencias_disponiveis))
        
        if cnes_selecionado:
            registros_hospital = len(df_mm[df_mm['CNES'] == cnes_selecionado])
            st.metric("üìã Registros do Hospital", registros_hospital)
        
        # Info do conte√∫do
        st.markdown("""
        **üìä Conte√∫do do Relat√≥rio:**
        - ‚úÖ Resumo executivo com efici√™ncia
        - ‚úÖ Evolu√ß√£o temporal (12 meses)
        - ‚úÖ An√°lise DEA e benchmarks
        - ‚úÖ Gr√°ficos de procedimentos
        - ‚úÖ Spider chart de alvos
        - ‚úÖ Sistema de alertas
        
        **üéØ Tipos Dispon√≠veis:**
        - üìÑ **Padr√£o**: HTML + arquivos externos
        - üì¶ **Incorporado**: Tudo em um arquivo
        """)
    
    # Informa√ß√µes do hospital selecionado
    if cnes_selecionado and competencia_selecionada:
        st.markdown("---")
        
        info = hospitais_info[cnes_selecionado]
        
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"""
            <div class="info-box">
                <h4>üìã Hospital Selecionado</h4>
                <p><strong>CNES:</strong> {cnes_selecionado}</p>
                <p><strong>Nome:</strong> {info['nome']}</p>
                <p><strong>Munic√≠pio:</strong> {info['municipio']}</p>
                <p><strong>UF:</strong> {info['uf']}</p>
                <p><strong>Compet√™ncia:</strong> {formatar_competencia(competencia_selecionada)}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            # Bot√µes de gera√ß√£o
            st.markdown("**üìä Tipo de Relat√≥rio:**")
            
            col_btn1, col_btn2 = st.columns(2)
            
            with col_btn1:
                if st.button("üìÑ Padr√£o", type="secondary", use_container_width=True, help="Relat√≥rio com arquivos externos"):
                    st.session_state.gerar_relatorio = True
                    st.session_state.tipo_relatorio = 'padrao'
                    st.session_state.relatorio_gerado = False
            
            with col_btn2:
                if st.button("üì¶ Incorporado", type="primary", use_container_width=True, help="Tudo em um arquivo"):
                    st.session_state.gerar_relatorio = True
                    st.session_state.tipo_relatorio = 'embedded'
                    st.session_state.relatorio_gerado = False
        
        # Gera√ß√£o do relat√≥rio
        if st.session_state.get('gerar_relatorio', False) and not st.session_state.get('relatorio_gerado', False):
            tipo_relatorio = st.session_state.get('tipo_relatorio', 'padrao')
            tipo_nome = "Incorporado" if tipo_relatorio == 'embedded' else "Padr√£o"
            
            st.markdown(f"### üîÑ Gerando Relat√≥rio {tipo_nome}...")
            
            resultados = gerar_relatorio_web(cnes_selecionado, competencia_selecionada, tipo_relatorio)
            
            if resultados:
                st.session_state.resultados_relatorio = resultados
                st.session_state.relatorio_gerado = True
                st.session_state.gerar_relatorio = False
                st.rerun()  # Recarregar para mostrar resultados
            else:
                st.error("‚ùå Erro ao gerar o relat√≥rio. Tente novamente.")
                st.session_state.gerar_relatorio = False
        
        # Mostrar resultados se relat√≥rio foi gerado
        if st.session_state.get('relatorio_gerado', False) and 'resultados_relatorio' in st.session_state:
            resultados = st.session_state.resultados_relatorio
            tipo_relatorio = resultados.get('tipo', 'padrao')
            tipo_nome = "Incorporado" if tipo_relatorio == 'embedded' else "Padr√£o"
            
            st.markdown(f"""
            <div class="success-box">
                <h3>‚úÖ Relat√≥rio {tipo_nome} Gerado com Sucesso!</h3>
                <p>Relat√≥rio completo gerado com todas as funcionalidades do modo local.</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Preview das informa√ß√µes
            if resultados['preview_info']:
                info_preview = resultados['preview_info']
                
                if tipo_relatorio == 'embedded':
                    tamanho_info = f"üìÅ Tamanho: {resultados['tamanho_kb']:.1f} KB (arquivo √∫nico)"
                else:
                    tamanho_info = f"üìÅ Tamanho: {info_preview['tamanho_arquivo']:,} caracteres"
                
                st.markdown(f"""
                <div class="report-preview">
                    <h4>üìÑ Informa√ß√µes do Relat√≥rio {tipo_nome}</h4>
                    <div style="display: flex; justify-content: space-around; margin: 1rem 0;">
                        <div><strong>üìä Gr√°ficos Interativos:</strong> {info_preview['num_graficos']}</div>
                        <div><strong>üñºÔ∏è Imagens:</strong> {info_preview['num_imagens']}</div>
                        <div><strong>üìã Tabelas:</strong> {'‚úÖ' if info_preview['tem_tabelas'] else '‚ùå'}</div>
                    </div>
                    <div style="display: flex; justify-content: space-around;">
                        <div><strong>üï∑Ô∏è Spider Chart:</strong> {'‚úÖ' if info_preview['tem_spider'] else '‚ùå'}</div>
                        <div><strong>üìà Evolu√ß√£o:</strong> {'‚úÖ' if info_preview['tem_evolucao'] else '‚ùå'}</div>
                        <div><strong>üéØ Benchmarks:</strong> {'‚úÖ' if info_preview['tem_benchmarks'] else '‚ùå'}</div>
                    </div>
                    <p style="margin-top: 1rem;"><strong>{tamanho_info}</strong></p>
                    <p><strong>üîÑ Tipo:</strong> {'üì¶ Autossuficiente (sem depend√™ncias)' if tipo_relatorio == 'embedded' else 'üìÑ Padr√£o (com arquivos externos)'}</p>
                </div>
                """, unsafe_allow_html=True)
            
            # Bot√µes de download
            if tipo_relatorio == 'embedded':
                # Relat√≥rio incorporado - apenas um download
                col_down1, col_down2 = st.columns([2, 1])
                
                with col_down1:
                    # Download HTML incorporado
                    nome_html = f"relatorio_incorporado_{cnes_selecionado}_{competencia_selecionada}.html"
                    st.download_button(
                        label="üì¶ Baixar Relat√≥rio Incorporado",
                        data=resultados['html_content'].encode('utf-8'),
                        file_name=nome_html,
                        mime="text/html",
                        use_container_width=True,
                        help="Arquivo HTML √∫nico com todas as visualiza√ß√µes incorporadas"
                    )
                
                with col_down2:
                    # Bot√£o para novo relat√≥rio
                    if st.button("üîÑ Gerar Novo Relat√≥rio", use_container_width=True):
                        # Limpar estado
                        for key in ['gerar_relatorio', 'relatorio_gerado', 'resultados_relatorio', 'tipo_relatorio']:
                            if key in st.session_state:
                                del st.session_state[key]
                        st.rerun()
                
                st.markdown("""
                <div style="background-color: #e8f5e8; padding: 1rem; border-radius: 0.5rem; margin: 1rem 0;">
                    <h5>üì¶ Vantagens do Relat√≥rio Incorporado:</h5>
                    <ul>
                        <li>‚úÖ <strong>Arquivo √∫nico</strong> - sem depend√™ncias externas</li>
                        <li>‚úÖ <strong>Autossuficiente</strong> - todas as imagens e gr√°ficos inclu√≠dos</li>
                        <li>‚úÖ <strong>Ideal para compartilhamento</strong> - envie por email facilmente</li>
                        <li>‚úÖ <strong>Arquivamento permanente</strong> - n√£o perde componentes</li>
                        <li>‚úÖ <strong>Menor tamanho total</strong> - compactado e otimizado</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
                
            else:
                # Relat√≥rio padr√£o - m√∫ltiplos downloads
                col_down1, col_down2, col_down3 = st.columns(3)
                
                with col_down1:
                    # Download HTML principal
                    with open(resultados['html_path'], 'rb') as f:
                        html_bytes = f.read()
                    
                    nome_html = f"relatorio_{cnes_selecionado}_{competencia_selecionada}.html"
                    st.download_button(
                        label="üìÑ Baixar HTML Principal",
                        data=html_bytes,
                        file_name=nome_html,
                        mime="text/html",
                        use_container_width=True,
                        help="Arquivo HTML principal do relat√≥rio"
                    )
                
                with col_down2:
                    # Download ZIP completo
                    if resultados['zip_path'] and os.path.exists(resultados['zip_path']):
                        with open(resultados['zip_path'], 'rb') as f:
                            zip_bytes = f.read()
                        
                        nome_zip = f"relatorio_completo_{cnes_selecionado}_{competencia_selecionada}.zip"
                        st.download_button(
                            label="üì¶ Baixar Pacote ZIP",
                            data=zip_bytes,
                            file_name=nome_zip,
                            mime="application/zip",
                            use_container_width=True,
                            help="Pacote completo com todos os arquivos"
                        )
                
                with col_down3:
                    # Bot√£o para novo relat√≥rio
                    if st.button("üîÑ Gerar Novo Relat√≥rio", use_container_width=True):
                        # Limpar estado
                        for key in ['gerar_relatorio', 'relatorio_gerado', 'resultados_relatorio', 'tipo_relatorio']:
                            if key in st.session_state:
                                del st.session_state[key]
                        st.rerun()
            
            # Instru√ß√µes baseadas no tipo
            if tipo_relatorio == 'embedded':
                st.markdown("""
                ---
                ### üìù Instru√ß√µes de Uso - Relat√≥rio Incorporado:
                
                1. **üì¶ Baixar arquivo √∫nico**: Clique no bot√£o acima para baixar
                2. **üåê Abrir no navegador**: Clique duas vezes no arquivo baixado
                3. **üì§ Compartilhar facilmente**: Envie o arquivo por email ou mensagem
                4. **üìÅ Arquivar permanentemente**: N√£o depende de outros arquivos
                
                > **‚úÖ Garantia**: Relat√≥rio **completo e autossuficiente** - id√™ntico ao modo local!
                """)
            else:
                st.markdown("""
                ---
                ### üìù Instru√ß√µes de Uso - Relat√≥rio Padr√£o:
                
                1. **üìÑ HTML Principal**: Baixe e abra no navegador para visualiza√ß√£o completa
                2. **üì¶ Pacote ZIP**: Cont√©m todos os arquivos (ideal para arquivamento)
                3. **üåê Melhor experi√™ncia**: Abra o arquivo HTML baixado no seu navegador preferido
                
                > **‚úÖ Garantia**: Os relat√≥rios gerados s√£o **id√™nticos** aos criados pelo modo local!
                """)
    
    else:
        # Mensagens de orienta√ß√£o
        if not cnes_selecionado:
            st.info("üëÜ Selecione um hospital acima para continuar.")
        elif not competencia_selecionada:
            st.info("üëÜ Selecione uma compet√™ncia para o hospital escolhido.")

if __name__ == "__main__":
    main() 